#CODE-------------------------------------------------------------------------------------------------------------------------------------------------------
clear
home
printf("Resolva o sistema utilizando o método de eliminação de Gauss:\n")
printf("3.x1 + 2.x2 + 4.x3 = 1\n")
printf("x1 + x2 + 2.x3 = 2\n")
printf("4x1 + 3.x2 + 2.x3 = 3\n")

#-------------------------------------------------------------------------------------------------
#cria-se a matriz A e o vetor B a partir desse sistema, assim como a matriz aumentada axb
#-------------------------------------------------------------------------------------------------
a = [3 2 4;1 1 2;4 3 2];
printf("A:\n")
disp(a)
b = [1;2;3];
printf("B:\n")
disp(b)
axb = [3 2 4 1;1 1 2 2;4 3 2 3];
printf("Ax|B:\n")
disp(axb)
printf("______________________________________________\n")


#-------------------------------------------------------------------------------------------------
#para cada pivô/linha (a partir do segunda) faça:
#-------------------------------------------------------------------------------------------------
for k=2:3


#-------------------------------------------------------------------------------------------------
  #para cada linha abaixo do pivô acima faça:
#-------------------------------------------------------------------------------------------------
  for i=k:3
  
  
#-------------------------------------------------------------------------------------------------
    #encontre a razão "m" entre o elemento inicial desta linha e a linha anterior 
#-------------------------------------------------------------------------------------------------
    m = a(i,k-1)/a(k-1,k-1);
    printf("m%d.%d = A%d.%d/A%d.%d\n",i,k-1,i,k-1,k-1,k-1)
    printf("m%d.%d = %d/%d = %d\n",i,k-1,a(i,k-1),a(k-1,k-1),m)
    
    
#-------------------------------------------------------------------------------------------------
    #para cada elemento nessa linha, subtraia o elemento da linha anterior multiplicado
    #pela razão encontrada entre elas
#-------------------------------------------------------------------------------------------------
    for j=k-1:3
      printf("(%d)A%d.%d = (%d)A%d.%d - m%d.%d * A%d.%d\n",k,i,j,k-1,i,j,i,k-1,k-1,j)
      printf("(%d)A%d.%d = %d - ( %d * %d ) = ",k,i,j,a(i,j),m,a(k-1,j))
      a(i,j) = a(i,j) - (m*a(k-1,j));
      axb(i,j) = a(i,j);
      z=abs((a(i,j)));
      
      
#-------------------------------------------------------------------------------------------------
      #para melhor visualização, adotamos um arredondamento para subtrações não
      #exatas entre dizimas periódicas neste programa (apenas para visualização)
#-------------------------------------------------------------------------------------------------
      if( z<e^(-10))
      printf("%d",z)
        axb(i,j) = abs(round(a(i,j)));
      endif
      printf("%d\n",a(i,j))
    endfor 
      printf("(%d)B%d = (%d)B%d - m%d.%d * B%d\n",k,i,k-1,i,i,k-1,k-1)
      printf("(%d)B%d = %d - ( %d * %d ) = ",k,i,b(i,1),m,b(k-1,1))
      b(i,1) = b(i,1) - (m*b(k-1,1));
      axb(i,4) = b(i,1);
      z=abs((b(i,1)));
      if( z<e^(-10))
        axb(i,4) = abs(round(b(i,1)));
      endif
      printf("%d\n",b(i,1))
  endfor
printf("______________________________________________\n")
endfor
printf("Ax|B:\n")
disp(axb)
printf("\n")


#-------------------------------------------------------------------------------------------------
#após o processo anterior, obtivemos então uma matriz triangular superior
#assim podemos dar início ao método de solução do triângulo superior
#-------------------------------------------------------------------------------------------------
x=zeros(3,1);


#-------------------------------------------------------------------------------------------------
#para cada linha, da última até a primeira, faça:
#-------------------------------------------------------------------------------------------------
for k = 3:-1:1
  printf("x%d = 1/%d * (%d",k,a(k,k),b(k,1))
  somatorio = 0;
  
  
#-------------------------------------------------------------------------------------------------
 #para cada coluna a partir da pivô(não inclusa) até a ultima, faça:
#-------------------------------------------------------------------------------------------------
  for i = k+1:3
    if (k~=3)
    printf(" - ")
  endif
  
  
#-------------------------------------------------------------------------------------------------
    #a somatória do produto dos elementos desta linha (com exceção do pivô) com
    #os valores de x já encontrados anteriormente.
#-------------------------------------------------------------------------------------------------
    somatorio=somatorio+(a(k,i)*x(i,1));
    printf("(%d)",a(k,i)*x(i,1))    
  endfor
  
#-------------------------------------------------------------------------------------------------
  #subtraia esta somatoria ao valor do vetor de igualdade do sistema (b(i)) e 
  #divida pelo elemento da diagonal principal nesta linha (a(i,i))
  #assim teremos o valor de x(i) da solução
#-------------------------------------------------------------------------------------------------
  x(k,1)=1/a(k,k)*(b(k,1)-somatorio);
      z=abs((x(k,1)));
      if( z<e^(-10))
  x(k,1) = abs(round(x(k,1)));
  endif
  printf(") = %d\n",x(k,1));
endfor
printf("\nx: \n")
disp(x)

#OUTPUT----------------------------------------------------------------------------------------------------------------------------------------------------

Resolva o sistema utilizando o método de eliminação de Gauss:
3.x1 + 2.x2 + 4.x3 = 1
x1 + x2 + 2.x3 = 2
4x1 + 3.x2 + 2.x3 = 3
A:
   3   2   4
   1   1   2
   4   3   2
B:
   1
   2
   3
Ax|B:
   3   2   4   1
   1   1   2   2
   4   3   2   3
______________________________________________
m2.1 = A2.1/A1.1
m2.1 = 1/3 = 0.333333
(2)A2.1 = (1)A2.1 - m2.1 * A1.1
(2)A2.1 = 1 - ( 0.333333 * 3 ) = 00
(2)A2.2 = (1)A2.2 - m2.1 * A1.2
(2)A2.2 = 1 - ( 0.333333 * 2 ) = 0.333333
(2)A2.3 = (1)A2.3 - m2.1 * A1.3
(2)A2.3 = 2 - ( 0.333333 * 4 ) = 0.666667
(2)B2 = (1)B2 - m2.1 * B1
(2)B2 = 2 - ( 0.333333 * 1 ) = 1.66667
m3.1 = A3.1/A1.1
m3.1 = 4/3 = 1.33333
(2)A3.1 = (1)A3.1 - m3.1 * A1.1
(2)A3.1 = 4 - ( 1.33333 * 3 ) = 00
(2)A3.2 = (1)A3.2 - m3.1 * A1.2
(2)A3.2 = 3 - ( 1.33333 * 2 ) = 0.333333
(2)A3.3 = (1)A3.3 - m3.1 * A1.3
(2)A3.3 = 2 - ( 1.33333 * 4 ) = -3.33333
(2)B3 = (1)B3 - m3.1 * B1
(2)B3 = 3 - ( 1.33333 * 1 ) = 1.66667
______________________________________________
m3.2 = A3.2/A2.2
m3.2 = 0.333333/0.333333 = 1
(3)A3.2 = (2)A3.2 - m3.2 * A2.2
(3)A3.2 = 0.333333 - ( 1 * 0.333333 ) = 5.55112e-175.55112e-17
(3)A3.3 = (2)A3.3 - m3.2 * A2.3
(3)A3.3 = -3.33333 - ( 1 * 0.666667 ) = -4
(3)B3 = (2)B3 - m3.2 * B2
(3)B3 = 1.66667 - ( 1 * 1.66667 ) = -4.44089e-16
______________________________________________
Ax|B:
   3.00000   2.00000   4.00000   1.00000
   0.00000   0.33333   0.66667   1.66667
   0.00000   0.00000  -4.00000   0.00000

x3 = 1/-4 * (-4.44089e-16) = 0
x2 = 1/0.333333 * (1.66667 - (0)) = 5
x1 = 1/3 * (1 - (10) - (0)) = -3

x:
  -3.00000
   5.00000
   0.00000
>>
